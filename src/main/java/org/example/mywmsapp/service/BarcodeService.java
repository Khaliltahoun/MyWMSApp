package org.example.mywmsapp.service;


import org.example.mywmsapp.dao.BarcodeDAO;
import org.example.mywmsapp.dao.ProductDAO;
import org.example.mywmsapp.model.Place;
import org.example.mywmsapp.model.Product;
import org.example.mywmsapp.model.Section;
import java.util.List;

public class BarcodeService {
    private static final ProductService productService = new ProductService();
    private static final WarehouseService warehouseService = new WarehouseService();
    private final SectionService sectionService = new SectionService();
    private static final ProductDAO productDAO = new ProductDAO();
    private static final BarcodeDAO barcodeDAO = new BarcodeDAO();

    // ‚úÖ V√©rifier si le code-barres est valide
    private static boolean validateBarcode(String barcode) {
        return barcode != null && !barcode.trim().isEmpty();
    }

    // ‚úÖ Recherche du produit et des emplacements apr√®s scan
    public List<Place> processBarcodeScan(String barcode) {
        if (!validateBarcode(barcode)) {
            System.out.println("‚ùå Code-barres invalide !");
            return null;
        }

        // üîç R√©cup√©rer le produit
        Product product = productService.getProductByBarcode(barcode);
        if (product == null) {
            System.out.println("‚ùå Produit non trouv√© pour ce code-barres !");
            return null;
        }

        // üîé R√©cup√©rer la section associ√©e √† la cat√©gorie du produit
        Section section = sectionService.getSectionByCategory(product.getCategory());
        if (section == null) {
            System.out.println("‚ö†Ô∏è Aucune section trouv√©e pour la cat√©gorie " + product.getCategory());
            return null;
        }

        System.out.println("üìå Produit de cat√©gorie " + product.getCategory() + " -> Stockage dans la section " + section.getName());

        // üîç Trouver les places disponibles dans cette section
        return warehouseService.getAvailablePlacesForCategory(section.getCategory());
    }

    // ‚úÖ Recherche d'un produit par code-barres
    public static Product scanProduct(String barcode) {
        if (!validateBarcode(barcode)) {
            System.out.println("‚ùå Code-barres invalide !");
            return null;
        }
        return productDAO.getProductByBarcode(barcode);
    }

    // ‚úÖ Traitement du code-barres scann√©
    public Product processBarcode(String barcode) {
        if (!validateBarcode(barcode)) {
            System.out.println("‚ùå Code-barres invalide !");
            return null;
        }

        System.out.println("üîé Scanne du produit : " + barcode);
        Product product = productService.getProductByBarcode(barcode);
        if (product != null) {
            System.out.println("‚úÖ Produit trouv√© : " + product.getName() + " | Cat√©gorie : " + product.getCategory());
        } else {
            System.out.println("‚ö†Ô∏è Aucun produit trouv√© pour ce code-barres.");
        }
        return product;
    }

    // ‚úÖ R√©cup√©rer l'ID de l'entrep√¥t en fonction de la section
    private static int getWarehouseIdForSection(int sectionId) {
        // ‚ö†Ô∏è √Ä remplacer par une requ√™te SQL si n√©cessaire
        return 1; // Par d√©faut, ID de l'entrep√¥t fix√© √† 1
    }

    /**
     * ‚úÖ Saves a product into the database if it does not already exist.
     * @param product The product to save
     * @return true if the product was successfully saved, false otherwise
     */
    public boolean saveProduct(Product product) {
        if (product == null) {
            System.out.println("‚ùå [BarcodeService] Impossible de sauvegarder un produit NULL.");
            return false;
        }

        // üîç V√©rifier si le produit existe d√©j√†
        Product existingProduct = productDAO.getProductByBarcode(product.getBarcode());
        if (existingProduct != null) {
            System.out.println("‚úÖ [BarcodeService] Produit d√©j√† existant dans la DB: " + product.getName());
            return true; // D√©j√† pr√©sent, pas besoin de l'ins√©rer
        }

        // üîÑ Ins√©rer le nouveau produit
        boolean inserted = productDAO.insertProduct(product);
        if (inserted) {
            System.out.println("‚úÖ [BarcodeService] Produit sauvegard√© avec succ√®s: " + product.getName());
        } else {
            System.out.println("‚ùå [BarcodeService] √âchec de l'enregistrement du produit: " + product.getName());
        }
        return inserted;
    }

    // ‚úÖ Stocker automatiquement un produit apr√®s scan
    public static boolean storeProduct(String barcode, int placeId, int sectionId) {
        if (!validateBarcode(barcode)) {
            System.out.println("‚ùå Code-barres invalide !");
            return false;
        }

        System.out.println("üì¶ Tentative de stockage du produit avec code-barres : " + barcode);

        // üîç V√©rifier si le produit existe
        Product product = productService.getProductByBarcode(barcode);
        if (product == null) {
            System.out.println("‚ùå Impossible de stocker : Produit non trouv√©.");
            return false;
        }

        // ‚úÖ Mettre √† jour la base de donn√©es pour indiquer que la place est occup√©e
        boolean stored = warehouseService.storeProduct(barcode, placeId);
        if (stored) {
            System.out.println("‚úÖ Produit stock√© √† l‚Äôemplacement ID : " + placeId);
            int warehouseId = getWarehouseIdForSection(sectionId);
            barcodeDAO.saveScan(barcode, warehouseId, sectionId, placeId);
            return true;
        } else {
            System.out.println("‚ùå √âchec du stockage du produit.");
            return false;
        }
    }
}
