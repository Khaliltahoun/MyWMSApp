package org.example.mywmsapp.service;

import org.example.mywmsapp.dao.ProductDAO;
import org.example.mywmsapp.model.Product;
import java.util.List;

public class ProductService {
    private final ProductDAO productDAO = new ProductDAO();
    private final OdooService odooService = new OdooService();

    public Product getProductByBarcode(String barcode) {
        System.out.println("üîç Recherche du produit avec le code-barres : " + barcode);

        // 1Ô∏è‚É£ V√©rifier en base de donn√©es locale
        Product product = productDAO.getProductByBarcode(barcode);

        if (product != null) {
            System.out.println("‚úÖ Produit trouv√© en base de donn√©es : " + product.getName());

            // 1Ô∏è‚É£.1 V√©rifier si la cat√©gorie correspond √† celle de Odoo
            Product odooProduct = odooService.getProductByBarcode(barcode);

            if (odooProduct != null) {
                System.out.println("üì¶ Quantit√© Odoo trouv√©e : " + odooProduct.getQuantity());

                if (product != null) {
                    // If product exists in DB, update its quantity with Odoo's value
                    product.setQuantity(odooProduct.getQuantity());
                } else {
                    // If product is NOT in DB, use the Odoo product directly
                    product = odooProduct;
                }
            } else {
                System.out.println("‚ùå Produit non trouv√© sur Odoo.");
            }
            if (odooProduct != null) {
                int odooCategory = extractCategoryId(odooProduct); // üîπ Fix category extraction
                int dbCategory = product.getCategory();

                System.out.println("üîé Cat√©gorie actuelle (DB): " + dbCategory + " | Cat√©gorie Odoo: " + odooCategory);

                if (odooCategory > 0 && odooCategory != dbCategory) {
                    System.out.println("üîÑ Mise √† jour de la cat√©gorie du produit...");
                    try {
                        boolean updated = productDAO.updateProductCategory(barcode, odooCategory);
                        if (updated) {
                            product.setCategory(odooCategory);
                            System.out.println("‚úÖ Cat√©gorie mise √† jour : " + odooCategory);
                        } else {
                            System.out.println("‚ùå √âchec de la mise √† jour en base.");
                        }
                    } catch (Exception e) {
                        System.out.println("‚ùå Erreur lors de la mise √† jour de la cat√©gorie : " + e.getMessage());
                    }
                }
            }

            return product; // ‚úÖ Retour du produit trouv√©
        }

        // 2Ô∏è‚É£ Si non trouv√© en DB, chercher sur Odoo
        System.out.println("‚ö†Ô∏è Produit non trouv√© en DB. Recherche dans Odoo...");
        Product odooProduct = odooService.getProductByBarcode(barcode);

        if (odooProduct != null) {
            int odooCategory = extractCategoryId(odooProduct); // üîπ Fix category extraction

            if (odooCategory > 0) {
                System.out.println("‚úÖ Produit trouv√© sur Odoo : " + odooProduct.getName());
                productDAO.insertProduct(odooProduct); // Enregistrer en DB
            } else {
                System.out.println("‚ö†Ô∏è Cat√©gorie non valide r√©cup√©r√©e depuis Odoo. Produit non enregistr√©.");
            }
        } else {
            System.out.println("‚ùå Aucun produit trouv√© pour ce code-barres !");
        }

        return odooProduct;
    }

    /**
     * üîπ Fix: Extracts the correct category ID from Odoo's response
     */
    private int extractCategoryId(Product odooProduct) {
        Object categoryData = odooProduct.getCategory(); // Adapt this to the real method

        if (categoryData instanceof Integer) {
            return (int) categoryData; // ‚úÖ Direct integer case
        } else if (categoryData instanceof Object[] objArray && objArray.length > 0) {
            try {
                return Integer.parseInt(objArray[0].toString()); // ‚úÖ Convert first element to int
            } catch (NumberFormatException e) {
                System.out.println("‚ùå Erreur de conversion de la cat√©gorie: " + objArray[0]);
            }
        }

        System.out.println("‚ö†Ô∏è Cat√©gorie invalide r√©cup√©r√©e depuis Odoo: " + categoryData);
        return -1; // Default invalid category
    }

    /**
     * üîÑ Met √† jour la cat√©gorie d'un produit si elle est valide et diff√©rente
     */
    public boolean updateProductCategory(String barcode, int newCategory) {
        System.out.println("üîÑ Mise √† jour de la cat√©gorie du produit avec code-barres : " + barcode);

        // V√©rifier si le produit existe d√©j√† dans la base
        Product existingProduct = productDAO.getProductByBarcode(barcode);
        if (existingProduct == null) {
            System.out.println("‚ùå Produit introuvable. Impossible de mettre √† jour la cat√©gorie.");
            return false;
        }

        // V√©rifier si la cat√©gorie est r√©ellement diff√©rente
        if (existingProduct.getCategory() == newCategory) {
            System.out.println("‚úÖ La cat√©gorie est d√©j√† correcte. Aucune mise √† jour n√©cessaire.");
            return true;
        }

        // Effectuer la mise √† jour en base
        boolean updated = productDAO.updateProductCategory(barcode, newCategory);
        if (updated) {
            System.out.println("‚úÖ Cat√©gorie mise √† jour avec succ√®s pour le produit : " + barcode);
        } else {
            System.out.println("‚ùå √âchec de la mise √† jour de la cat√©gorie.");
        }

        return updated;
    }

    public boolean saveProduct(Product product) {
        return productDAO.insertProduct(product);
    }

    public boolean updateStock(String barcode, double quantity) {
        System.out.println("üîÑ Mise √† jour du stock pour le produit : " + barcode);
        return productDAO.updateProductStock(barcode, quantity);
    }

    public List<Product> searchProducts(String query) {
        return productDAO.findProductsByNameOrBarcode(query);
    }

    public List<Product> searchProductsByBarcode(String barcode) {
        return productDAO.findProductByBarcode(barcode);
    }
}
